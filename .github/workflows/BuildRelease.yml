name: build

on:
  push:
    tags:
      - '*'

jobs:
  buildRelease:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        xcode: [ Xcode ]
        os: [ ARM64 ]
        abi: [ arm64 ]
        include:
          - xcode: Xcode_14.1.0
            os: macos-13
            abi: x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Find Tag
        id: tagger
        uses: jimschubert/query-tag-action@v2
        with:
          skip-unshallow: 'true'
          abbrev: false
          commit-ish: HEAD
      - name: Set XCode Version
        run: sudo xcode-select -s /Applications/${{ matrix.xcode }}.app
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: pre build
        run: cd External/objective-git && script/bootstrap && script/update_libgit2 && cd ../..
      - name: Build project
        run: xcodebuild -workspace GitX.xcworkspace -scheme GitX -archivePath ./GitX archive ARCHS="${{ matrix.abi }}" PRODUCT_BUNDLE_IDENTIFIER=net.phere.GitX
      - name: Prepare artifact
        env:
          EXPORT_OPTIONS: ${{ secrets.NOTARY_EXPORT_OPTIONS }}
        run: |
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS" > EXPORT_OPTIONS_PATH
          xcodebuild -exportArchive -archivePath GitX.xcarchive -exportPath . -exportOptionsPlist EXPORT_OPTIONS_PATH
          echo "Create GitX-${{ matrix.abi }}.dmg"
          mkdir dist && cp -R GitX.app dist/ && ln -s /Applications dist/
          hdiutil create -fs HFS+ -srcfolder dist/ -volname GitX GitX-${{ matrix.abi }}.dmg
          rm -rf dist
          zip -r GitX-${{ matrix.abi }}.zip GitX.app
      - name: Notarize App
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          KEY_ID: ${{ secrets.APPLE_KEY_ID }}
        run: |
          APP_PATH="GitX.app"
          ZIP_PATH="GitX.zip"
          NOTARY_LOG="notary.log"
          ID_FILE="id.txt"
          
          ditto -c -k --keepParent "$APP_PATH" "$ZIP_PATH"
          
          xcrun notarytool submit "$ZIP_PATH" --key-id $KEY_ID --apple-id $APPLE_ID --team-id $TEAM_ID --password $APPLE_PASSWORD --wait | tee "$NOTARY_LOG" echo "print log output"
          cat "$NOTARY_LOG"
          
          ID=$(cat "$NOTARY_LOG" | tail -3 | cut -d':' -f2 | head -n 1)
          echo "Id is: $ID"
          
          xcrun notarytool log $ID --apple-id $APPLE_ID --team-id $TEAM_ID --password $APPLE_PASSWORD
      - name: Staple Notarization
        run: |
          # While you can notarize a ZIP archive, you canâ€™t staple to it directly.
          # Instead, run stapler against each item that you added to the archive.
          # Then create a new ZIP file containing the stapled items for distribution.
          # Reference: https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow
          APP_PATH="GitX.app"
          ZIP_PATH="GitX.zip"

          xcrun stapler staple "$APP_PATH"
          ditto -c -k --keepParent "$APP_PATH" "$ZIP_PATH"
      - name: Check Notarization
        run: spctl -a -vv GitX.app
      - name: Prepare release job
        run: zip -r GitX-${{ matrix.abi }}.zip GitX.app
      - uses: actions/upload-artifact@v4.3.3
        with:
          name: GitX-${{ matrix.abi }}.dmg
          path: GitX-${{ matrix.abi }}.dmg
      - uses: actions/upload-artifact@v4.3.3
        with:
          name: GitX-${{ matrix.abi }}.zip
          path: GitX-${{ matrix.abi }}.zip

  release:
    needs: buildRelease
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Find Tag
        id: tagger
        uses: jimschubert/query-tag-action@v2
        with:
          skip-unshallow: 'true'
          abbrev: false
          commit-ish: HEAD
      - uses: actions/download-artifact@v4
        with:
          name: GitX-x86_64.dmg
      - uses: actions/download-artifact@v4
        with:
          name: GitX-arm64.dmg
      - uses: actions/download-artifact@v4
        with:
          name: GitX-x86_64.zip
      - uses: actions/download-artifact@v4
        with:
          name: GitX-arm64.zip
      - name: Check pre-release
        run: |
          echo "tag=${{steps.tagger.outputs.tag}}"
          if [[ ${{ steps.tagger.outputs.tag }} == *alpha* || ${{ steps.tagger.outputs.tag }} == *beta* ]]
          then
             prerelease=true
          else
             prerelease=false
          fi
          echo "PRE_RELEASE=$prerelease" >> $GITHUB_ENV
          echo "prerelease=$prerelease"
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{steps.tagger.outputs.tag}}
          generate_release_notes: true
          prerelease: ${{ env.PRE_RELEASE }}
          name: ${{steps.tagger.outputs.tag}}
          files: |
            GitX-x86_64.dmg
            GitX-x86_64.zip
            GitX-arm64.dmg
            GitX-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: update Sparkle
        run: curl -u $GITHUB_ACTOR:${{ secrets.GITHUBTOKEN }} -X POST https://api.github.com/repos/$GITHUB_REPOSITORY/pages/builds

      - name: Checkout brew repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONALACCESSTOKEN }}
          repository: Homebrew/homebrew-cask.git
          path: brew
          ref: master
      - name: Show shasum
        run: |
          export shax86=$(shasum -a 256 GitX-x86_64.dmg | cut -d " " -f1)
          echo "x86 sha256=$shax86"
          export shaarm64=$(shasum -a 256 GitX-arm64.dmg | cut -d " " -f1)
          echo "arm64 sha256=$shaarm64"
          cd brew/Casks
          sed -n 1,3p gitx.rb > gitx.rb.new
          echo "  version \"${{ steps.tagger.outputs.tag }}\"" >> gitx.rb.new
          echo "  sha256 arm:   \"$shaarm64\"," >> gitx.rb.new
          echo "         intel: \"$shax86\"" >> gitx.rb.new
          sed -n 7,33p gitx.rb >> gitx.rb.new
          cat gitx.rb.new
          cp gitx.rb.new gitx.rb
          rm gitx.rb.new
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          path: ${{ github.workspace }}/brew
          commit-message: Bump gitx ${{ steps.tagger.outputs.tag }}
          title: Bump gitx ${{ steps.tagger.outputs.tag }}
          body: Bump gitx to ${{ steps.tagger.outputs.tag }}
          token: ${{ secrets.PERSONALACCESSTOKEN }}
          push-to-fork: hannesa2/homebrew-cask
          branch: bump-gitx-${{ steps.tagger.outputs.tag }}
          base: master
